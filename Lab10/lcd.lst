


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: Summer Gregurek and Zachary Susskind
    3 00000000         ; Last modification date: 4/13/16
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 40004100 
                       DC      EQU              0x40004100
   23 00000000 00000000 
                       DC_COMMAND
                               EQU              0
   24 00000000 00000040 
                       DC_DATA EQU              0x40
   25 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   26 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   27 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   28 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   29 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   30 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   31 00000000         
   32 00000000                 EXPORT           writecommand
   33 00000000                 EXPORT           writedata
   34 00000000         
   35 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   36 00000000                 THUMB
   37 00000000                 ALIGN
   38 00000000         



ARM Macro Assembler    Page 2 


   39 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   40 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   41 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   42 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   43 00000000         ; lot of data, the FIFOs are not used when writing
   44 00000000         ; commands, and they are used when writing data.  This
   45 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   46 00000000         ; that is actually being transmitted.
   47 00000000         ; The write command operation waits until all data has b
                       een
   48 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   49 00000000         ; the command, and then waits for the transmission to
   50 00000000         ; finish.
   51 00000000         ; The write data operation waits until there is room in 
                       the
   52 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   53 00000000         ; and then adds the data to the transmit FIFO.
   54 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   55 00000000         ; the SSI0 module is not initialized and enabled.
   56 00000000         
   57 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   58 00000000         ; Input: R0  8-bit command to transmit
   59 00000000         ; Output: none
   60 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   61 00000000         writecommand
   62 00000000         ;1) Read SSI0_SR_R and check bit 4, 
   63 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   64 00000000         ;3) Clear D/C=PA6 to zero
   65 00000000         ;4) Write the command to SSI0_DR_R
   66 00000000         ;5) Read SSI0_SR_R and check bit 4, 
   67 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   68 00000000 E92D 0FF0       PUSH             {R4-R11}
   69 00000004 4B17    busy    LDR              R3, =SSI0_SR_R
   70 00000006 6819            LDR              R1, [R3]
   71 00000008 F001 0110       AND              R1, R1, #0x10
   72 0000000C EA4F 1111       LSR              R1, #4      ;1) Read SSI0_SR_R 
                                                            and check bit 4, 
   73 00000010 2901            CMP              R1, #1
   74 00000012 D0F7            BEQ              busy        ;2) If bit 4 is hig
                                                            h, loop back to ste
                                                            p 1 (wait for BUSY 
                                                            bit to be low)
   75 00000014 4B14            LDR              R3, =DC
   76 00000016 681A            LDR              R2, [R3]
   77 00000018 F022 0240       BIC              R2, R2, #0x40 ;3) Clear D/C=PA6
                                                             to zero
   78 0000001C 701A            STRB             R2, [R3]



ARM Macro Assembler    Page 3 


   79 0000001E 4B13            LDR              R3, =SSI0_DR_R
   80 00000020 7018            STRB             R0, [R3]    ;4 Write the comman
                                                            d to SSI0_DR_R
   81 00000022 4B10    step    LDR              R3, =SSI0_SR_R
   82 00000024 6819            LDR              R1, [R3]
   83 00000026 F001 0110       AND              R1, R1, #0x10
   84 0000002A EA4F 1111       LSR              R1, #4      ;5) Read SSI0_SR_R 
                                                            and check bit 4, 
   85 0000002E 2901            CMP              R1, #1
   86 00000030 D0F7            BEQ              step        ;6) If bit 4 is hig
                                                            h, loop back to ste
                                                            p 5 (wait for BUSY 
                                                            bit to be low)
   87 00000032 E8BD 0FF0       POP              {R4-R11}
   88 00000036 4770            BX               LR          ;   return
   89 00000038         
   90 00000038         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   91 00000038         ; Input: R0  8-bit data to transmit
   92 00000038         ; Output: none
   93 00000038         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   94 00000038         writedata
   95 00000038         ;1) Read SSI0_SR_R and check bit 1, 
   96 00000038         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
   97 00000038         ;3) Set D/C=PA6 to one
   98 00000038         ;4) Write the 8-bit data to SSI0_DR_R
   99 00000038 E92D 0FF0       PUSH             {R4-R11}
  100 0000003C 4B09    loop    LDR              R3, =SSI0_SR_R
  101 0000003E 6819            LDR              R1, [R3]
  102 00000040 F001 0102       AND              R1, R1, #0x02
  103 00000044 EA4F 0151       LSR              R1, #1      ;1) Read SSI0_SR_R 
                                                            and check bit 1, 
  104 00000048 2900            CMP              R1, #0x00
  105 0000004A D0F7            BEQ              loop        ;2) If bit 1 is low
                                                             loop back to step 
                                                            1 (wait for TNF bit
                                                             to be high)
  106 0000004C 4B06            LDR              R3, =DC
  107 0000004E 681A            LDR              R2, [R3]
  108 00000050 F022 0240       BIC              R2, R2, #0x40
  109 00000054 F042 0240       ORR              R2, R2, #0x40 ;3) Set D/C=PA6 t
                                                            o one
  110 00000058 701A            STRB             R2, [R3]
  111 0000005A 4B04            LDR              R3, =SSI0_DR_R
  112 0000005C 7018            STRB             R0, [R3]    ;4) Write the 8-bit
                                                             data to SSI0_DR_R
  113 0000005E E8BD 0FF0       POP              {R4-R11}
  114 00000062 4770            BX               LR          ;   return
  115 00000064         
  116 00000064         ;***************************************************
  117 00000064         ; This is a library for the Adafruit 1.8" SPI display.
  118 00000064         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  119 00000064         ; ----> http://www.adafruit.com/products/358
  120 00000064         ; as well as Adafruit raw 1.8" TFT display
  121 00000064         ; ----> http://www.adafruit.com/products/618
  122 00000064         ;



ARM Macro Assembler    Page 4 


  123 00000064         ; Check out the links above for our tutorials and wiring
                        diagrams
  124 00000064         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  125 00000064         ; interface (RST is optional)
  126 00000064         ; Adafruit invests time and resources providing this ope
                       n source code,
  127 00000064         ; please support Adafruit and open-source hardware by pu
                       rchasing
  128 00000064         ; products from Adafruit!
  129 00000064         ;
  130 00000064         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  131 00000064         ; MIT license, all text above must be included in any re
                       distribution
  132 00000064         ;****************************************************
  133 00000064         
  134 00000064                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  135 00000064                 END                          ; end of file
              4000800C 
              40004100 
              40008008 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lcd.d 
-o.\lcd.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Luminary --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 35 in file LCD.s
   Uses
      None
Comment: .text unused
busy 00000004

Symbol: busy
   Definitions
      At line 69 in file LCD.s
   Uses
      At line 74 in file LCD.s
Comment: busy used once
loop 0000003C

Symbol: loop
   Definitions
      At line 100 in file LCD.s
   Uses
      At line 105 in file LCD.s
Comment: loop used once
step 00000022

Symbol: step
   Definitions
      At line 81 in file LCD.s
   Uses
      At line 86 in file LCD.s
Comment: step used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 61 in file LCD.s
   Uses
      At line 32 in file LCD.s
Comment: writecommand used once
writedata 00000038

Symbol: writedata
   Definitions
      At line 94 in file LCD.s
   Uses
      At line 33 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 22 in file LCD.s
   Uses
      At line 75 in file LCD.s
      At line 106 in file LCD.s

DC_COMMAND 00000000

Symbol: DC_COMMAND
   Definitions
      At line 23 in file LCD.s
   Uses
      None
Comment: DC_COMMAND unused
DC_DATA 00000040

Symbol: DC_DATA
   Definitions
      At line 24 in file LCD.s
   Uses
      None
Comment: DC_DATA unused
GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 25 in file LCD.s
   Uses
      None
Comment: GPIO_PORTA_DATA_R unused
SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 26 in file LCD.s
   Uses
      At line 79 in file LCD.s
      At line 111 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 27 in file LCD.s
   Uses
      At line 69 in file LCD.s
      At line 81 in file LCD.s
      At line 100 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 29 in file LCD.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: SSI_SR_BSY unused
SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE
   Definitions
      At line 28 in file LCD.s
   Uses
      None
Comment: SSI_SR_RNE unused
SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 30 in file LCD.s
   Uses
      None
Comment: SSI_SR_TNF unused
9 symbols
347 symbols in table
